#!/bin/bash

# Configuration
VOICEMEMO_DIR="$HOME/Library/Group Containers/group.com.apple.VoiceMemos.shared/Recordings"
OUTPUT_DIR="$HOME/Documents/VoiceMemos"
PROCESSED_LIST="$HOME/.voicememo_processed"
LOG_FILE="$HOME/.voicememo_processing.log"

# Create output directory if it doesn't exist
mkdir -p "$OUTPUT_DIR"

# Create processed list file if it doesn't exist
touch "$PROCESSED_LIST"

# Function to log messages
log_message() {
    local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo "$message" >> "$LOG_FILE"
    echo "$message"
}

# Function to get simple topic from keywords
get_simple_topic() {
    local transcript="$1"
    local topic="voicememo"

    # Convert to lowercase for matching
    local lower_transcript=$(echo "$transcript" | tr '[:upper:]' '[:lower:]')

    # Check for common keywords and patterns
    if echo "$lower_transcript" | grep -q -E '\b(meeting|call|conference|discussion|talk|spoke|conversation)\b'; then
        topic="meeting"
    elif echo "$lower_transcript" | grep -q -E '\b(dear|recap|follow.up|followup)\b'; then
        topic="followup"
    elif echo "$lower_transcript" | grep -q -E '\b(grocery|shopping|store|buy)\b'; then
        topic="shopping"
    elif echo "$lower_transcript" | grep -q -E '\b(todo|task|reminder|remember)\b'; then
        topic="reminder"
    elif echo "$lower_transcript" | grep -q -E '\b(idea|thought|concept|brainstorm)\b'; then
        topic="idea"
    elif echo "$lower_transcript" | grep -q -E '\b(work|project|job|office)\b'; then
        topic="work"
    elif echo "$lower_transcript" | grep -q -E '\b(personal|family|home)\b'; then
        topic="personal"
    elif echo "$lower_transcript" | grep -q -E '\b(note|notes|memo)\b'; then
        topic="note"
    fi

    echo "$topic"
}

# Function to get topic from Claude
get_topic_from_claude() {
    local transcript="$1"
    local topic
    local temp_file="/tmp/transcript_for_analysis_$$"

    # Debug: log transcript length and first few words
    local transcript_length=$(echo "$transcript" | wc -c | tr -d ' ')
    local first_words=$(echo "$transcript" | head -c 100)
    echo "  -> DEBUG: Transcript length: $transcript_length chars, first 100 chars: $first_words" >> "$LOG_FILE"

    # Create prompt file for Claude
    cat > "$temp_file" << 'PROMPT'
Analyze this voice memo transcript and extract the main topic.

Requirements:
- Return ONLY 1-2 descriptive words that capture the main subject
- Use underscores instead of spaces (e.g., meeting_notes, grocery_list)
- Be specific and descriptive
- Use lowercase
- No punctuation except underscores
- If it's about a person, use their name (e.g., john_call)
- If it's a type of content, be specific (e.g., work_update, family_news, todo_list)

Examples of good topics:
- meeting_recap
- grocery_list
- work_update
- family_call
- idea_brainstorm
- doctor_appointment
- travel_plans

Output only the topic, nothing else.

Transcript:
PROMPT

    echo "$transcript" >> "$temp_file"

    # Use Claude to analyze the transcript
    topic=$(claude --print < "$temp_file" 2>/dev/null | head -n 1 | tr ' ' '_' | tr -cd '[:alnum:]_-' | tr '[:upper:]' '[:lower:]')

    # Debug: log raw Claude output
    echo "  -> DEBUG: Raw Claude output: '$topic'" >> "$LOG_FILE"

    # Default to simple keyword extraction if Claude fails or returns empty
    if [ -z "$topic" ] || [ ${#topic} -lt 2 ]; then
        echo "  -> DEBUG: Claude failed, trying simple keyword extraction" >> "$LOG_FILE"
        topic=$(get_simple_topic "$transcript")
        echo "  -> DEBUG: Simple extraction result: '$topic'" >> "$LOG_FILE"
    fi

    # Cleanup temp file
    rm -f "$temp_file"

    echo "$topic"
}

# Process voice memos
log_message "Starting voice memo processing"
log_message "Voice memos directory: $VOICEMEMO_DIR"
log_message "Output directory: $OUTPUT_DIR"

# Count total files to process
total_files=$(find "$VOICEMEMO_DIR" -name "*.m4a" -type f | wc -l | tr -d ' ')
log_message "Found $total_files voice memo files to check"

# Find all m4a files in voice memos directory, sorted by modification time (newest first)
file_counter=0
find "$VOICEMEMO_DIR" -name "*.m4a" -type f -print0 | xargs -0 ls -t | while read -r voice_file; do
    file_counter=$((file_counter + 1))
    # Get file basename and full path hash for tracking
    file_basename=$(basename "$voice_file")
    file_hash=$(echo "$voice_file" | md5)
    file_size=$(ls -lh "$voice_file" | awk '{print $5}')

    log_message "[$file_counter/$total_files] Checking file: $file_basename (${file_size})"

    # Check if already processed
    if grep -q "$file_hash" "$PROCESSED_LIST"; then
        log_message "  -> Skipping: already processed"
        continue
    fi

    log_message "  -> Processing new file..."

    # Generate timestamp from file modification time
    file_mod_time=$(stat -f "%m" "$voice_file")
    timestamp=$(date -r "$file_mod_time" +%Y_%m_%dT%Hh%Mm%Ss)

    # Create temporary file for transcript
    temp_transcript="/tmp/voicememo_${timestamp}.txt"

    log_message "  -> Running Whisper transcription (this may take a moment)..."
    # Run Whisper to transcribe
    if whisper "$voice_file" --model base --output_format txt --output_dir /tmp --language en >/dev/null 2>&1; then
        log_message "  -> Whisper transcription completed successfully"
    else
        log_message "  -> ERROR: Whisper transcription failed"
        continue
    fi

    # Find the generated transcript file (Whisper creates it with the original filename)
    whisper_output="/tmp/${file_basename%.m4a}.txt"

    if [ -f "$whisper_output" ]; then
        # Read the transcript
        transcript=$(cat "$whisper_output")
        transcript_length=$(echo "$transcript" | wc -c | tr -d ' ')
        log_message "  -> Transcript generated: ${transcript_length} characters"

        # Get topic from transcript
        log_message "  -> Analyzing transcript for topic..."
        topic=$(get_topic_from_claude "$transcript")
        log_message "  -> Topic identified: $topic"

        # Create output filename with topic
        output_file="${OUTPUT_DIR}/${topic}_${timestamp}.md"

        # Write to markdown file with metadata
        {
            echo "# Voice Memo: ${topic}"
            echo ""
            echo "**Date:** $(date -r "$file_mod_time" '+%Y-%m-%d %H:%M:%S')"
            echo "**Original File:** ${file_basename}"
            echo ""
            echo "---"
            echo ""
            echo "${transcript}"
        } > "$output_file"

        # Add to processed list
        echo "$file_hash" >> "$PROCESSED_LIST"

        log_message "  -> Successfully saved as: $(basename "$output_file")"
        log_message "  -> File processing complete"

        # Clean up temporary transcript
        rm -f "$whisper_output"
    else
        log_message "  -> ERROR: Transcript file not found after Whisper processing"
    fi
done

log_message "Voice memo processing completed"

log_message "All voice memos processed with topic-based filenames"