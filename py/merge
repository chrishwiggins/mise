#!/usr/bin/python3

import csv
import os
import subprocess
import sys
import shutil
import datetime


def file_exists(file):
    return os.path.exists(file)


def validate_csv_structure(file_path, expected_num_columns):
    """
    Validate the structure of the CSV file, ensuring it has the expected number of columns.
    Raise an error with details if any row has an unexpected number of columns.
    """
    with open(file_path, mode="r") as csv_file:
        csv_reader = csv.reader(csv_file)
        for line_number, row in enumerate(csv_reader, start=1):
            if len(row) != expected_num_columns:
                raise ValueError(
                    f"Error in CSV file '{file_path}' at line {line_number}: "
                    f"Expected {expected_num_columns} columns, but found {len(row)}. "
                    f"Row contents: {row}. Please fix this line."
                )


def execute_command(command):
    """
    Executes a shell command and captures its output.
    """
    process = subprocess.Popen(
        command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True
    )
    stdout, stderr = process.communicate()
    return stdout.decode("utf-8"), stderr.decode("utf-8")


def move_file(source, destination, overwrite=False):
    """
    Moves a file from source to destination. If overwrite is True, it will remove the destination file first.
    """
    if overwrite and os.path.exists(destination):
        os.remove(destination)
    shutil.move(source, destination)


def copy_file(source, destination):
    """
    Copies a file from source to destination.
    """
    shutil.copy(source, destination)


def rename_dir(original, new_name):
    """
    Renames a directory.
    """
    os.rename(original, new_name)


def create_dir(directory):
    """
    Creates a directory if it doesn't already exist.
    """
    os.makedirs(directory, exist_ok=True)


# Main script starts here
body = "mbody.asc"  # Default body file
data = "mdata.csv"  # Default data file

# Check if arguments are passed
if len(sys.argv) == 2:
    body = sys.argv[1]  # Use the first argument as the body file

if len(sys.argv) == 3:
    body = sys.argv[1]  # Use the first argument as the body file
    data = sys.argv[2]  # Use the second argument as the data file

# Check if body and data files exist
for auxfile in [body, data]:
    if not file_exists(auxfile):
        print(f"Error: must exist: {auxfile}. MERGE FAIL")
        sys.exit(1)  # Exit the script if file doesn't exist

# Validate the CSV file structure
try:
    expected_columns = (
        4  # Assuming 4 columns based on the example (First_Name, Email, class, digit)
    )
    validate_csv_structure(data, expected_columns)
except ValueError as e:
    print(f"CSV Parsing Error: {str(e)}")
    sys.exit(1)  # Exit the script if CSV structure is invalid

# Start merging process
print(f"fields used from {data}:")
stdout, stderr = execute_command(f"head -1 {data}")
print(stdout)

if data.endswith(".tsv"):
    # If the data file is already a .tsv, just copy it.
    copy_file(data, "mdata.tsv")
else:
    # Otherwise, convert the data file to a .tsv format.
    execute_command(
        f"sed -e 's/[ ,]*$//' < {data} | grep -v '^#' | tr ',;' '\\t' > mdata.tsv"
    )

# Generating a date string for renaming the directory
date_str = datetime.datetime.now().strftime("%Y_%m_%dT%Hh%Mm%Ss")

# Check if 'mergedir' exists and rename it if it does
if file_exists("mergedir"):
    rename_dir("mergedir", f"mergedir_old_{date_str}")

create_dir("mergedir")

# Main merging operation
print("merging...")
stdout, stderr = execute_command(
    f"~/gd/aux/email_merger/email_merger -d -o mergedir {body} mdata.tsv"
)
print(stdout)
print("...merged")

# Move the processed data file to /tmp directory, overwriting if it exists
move_file("mdata.tsv", "/tmp/mdata.tsv", overwrite=True)

# Process each file in the 'mergedir'
os.chdir("mergedir")
for thing in os.listdir("."):
    execute_command(f"grep -v 'User-Agent:' {thing} > {thing}.eml")
    os.remove(thing)  # Remove the original file
